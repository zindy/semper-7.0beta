
Afitdp()
! Reasonably packaged D2FIT for single DP
! ------ - half or fullplane, using ram:995,996
local step,dk,psel,under,over,nou,t,s2
! back up sel
psel=sel
ask 'DP to fit [',sel,'] ' n1
if ~set(n1) n1=sel

phys=yes ips=2
akc:
if set(kv)&set(cs) jump ast
ask 'Voltage/kV, Cs/mm: ' kv,cs
jump akc
ast:
if set(step) jump on
ask 'Image pixel size STEP/nm ' step
jump ast
on:
t=kv*1e3 lam=t*1.60206e-4/9.1083/2.99793^2
lam=6.62517/root(2*1.60206*9.1083*t*(1+lam/2))

! force full-plane
trap=63 full n1 ram:996
if rc~=63 n1=ram:996
! resize for d2fit if necessary
pic n1 size
s2=128
n=fix((ny+s2-1)/s2)
nn=fix(ny/n)
n2=ram:995 lib $dpresize
step=step*ny/nn/n
dk=1/2/step/(nn/2)
! force half-plane
half ram:995

typ 'Select option:'
typ '   1  General (-300nm to 300nm)'
typ '   2  OVERfocus (0:300nm)'
typ '   3  UNDERfocus (-300nm:0)'
typ '   4  Within 150nm of given focus (low astig)'
typ '   5  Starting from two indicated zeros'
ask '   6  REFINE (=within 40nm of current estimate)  [1] ' m
if ~set(m) m=1
jump m#m

m1:
dpfit ram:995 krange 1,3.5
jump ppr

m2:
dpfit ram:995 over krange 1,3.5
jump ppr

m3:
dpfit ram:995 under krange 1,3.5
jump ppr

m4:
ask 'Estimated focus: ' c1
a1=0,0
dpfit ram:995 krange 1,3.5 within 150 of c1,a1,a12
jump ppr

m5:
typ 'Mark first zero along two mirror axes in turn'
display ram:995 times 3 to fs:1
xwires
d1=1/lam/msq(x,y)/dk^2
a1=phase(x,y)
xwires
d2=1/lam/msq(x,y)/dk^2
over=1 under=2
ask 'Are these under or overfocus [UNDER,UNDER] ' no1,no2
if ~set(no1) no1=2
if ~set(no2) no2=2
unset over,under
if no1=2 d1=-d1
if no2=2 d2=-d2
c1=.5*(d1+d2) a1=.5*(d1-d2)*cos(a1),.5*(d1-d2)*sin(a1)
dpfit within 150 of c1,a1,a12 krange 1,3.5
jump ppr

m6:
dpfit ram:995 within 40 of c1,a1,a12

ppr:

dps n1 angle .5*pha(a1,a12)
type 'Focus C1=',fix(c1*10)/10,'nm  Astigmatism A1=', fix(a1*10)/10,fix(a12*10)/10,'nm'
if eflag type 'Rescanning larger region'
if eflag jump m6

ask 'Refine? [no] ' n
if ~set(n) n=no
if n jump m6

! restore select
type 'DEB: restore selection of ',psel
select psel

end

$dpresize()
! undersamples a DP to size S2 or less, for D2FIT
! --------- ghastly fudge to ensure symmetry preserved
! from N1 to N2, using pic ram:998,999, returning new size in NN
local nx,ny,nz,ns

! find sampling and (even) final size
pic n1 size
ns=fix((ny+s2-1)/s2)
nn=fix(fix(ny/ns)/2)*2

if ns~=1 jump resize
copy n1 n2
return
resize:

if fix(ns/2)*2=ns jump even
odd:

ext n1 n2 size nn sam ns average pos -fix(ns/2),fix(ns/2)
return
even:

cre ram:999 size ns+1,1 val 1 fp
p -fix(ns/2)=.5
p fix(ns/2)=.5
sur full nover
calc ram:999/(ns+1)/mean
fir n1 ram:998 with ram:999 sep
ext to n2 sampling ns size nn
end
