.Id $Id: fort77.1,v 1.5 2009/04/12 17:38:48 ldm Exp $
.TH FORT77 1 "Nov 1996" Linux "Linux Programmer's Manual"
.SH NAME
fort77 \- invoke f2c Fortran translator transparently, like a compiler
.SH SYNOPSIS
.B fort77
.RB [ -c ]
.RB [ -g ]
.RB [ -v ]
.RB [ -k ]
.RB [ -P ]
.RB [ -cpp ]
.RB [ "f2c option ..." ]
.RB [ -L
.IR "directory ..." ]
.RI [ "gcc-option ..." ]
.RI [ "link option ..." ]
.RB [ -O
.IR optlevel ]
.RI [ -o
.IR outfile ]
.RB [ -s ]
.RB [ -w ]
.RB [ -Wx,arg1 [ ,arg2 ]...]
.I "file ..."
.SH DESCRIPTION
The
.B fort77
script invokes the
.B f2c
command transparently, so it can be used like a real Fortran compiler.
It can be used to compile Fortran, C and assembler code, and to link
it with the f2c libraries.
.PP
File arguments ending with
.B .f
are compiled as Fortran source files.
Files which end with
.B .P
are passed through to f2c, and files ending with
.B .F
are passed to the C preprocessor (invoked as
.RB """" "/lib/cpp -traditional" """")
first.  Any switches passed via
.B -D
will be passed to the preprocessor.
If the translation is successful, the resulting C files will be passed to
.I cc
for translation into an object file.
Files ending in
.BR .c ,
.BR .C ,
.BR .cc ,
.BR .i ,
.BR .s ,
.BR .S ,
.BR .m ,
.BR .cc 
or
.B .cxx
are passed to the GNU C compiler directly; see
.IR gcc(1) .
All other files are passed to the linker.
.SH OPTIONS
.TP 8
.B -c
Supress linking and produce an object (
.B .o
) file from each source file.
.TP 8
.B -g
Include debugging information.
.B -v
Be verbose; supplying this twice will also tell the C compilers
etc to be verbose.
.TP 8
.B -k
Keep the C files generated by f2c around.
.TP 8
.B -cpp
Pass Fortran code through the C preprocessor, as if filenames
ended in
.BR .F .
.TP 8
.BR -P
Generate f2c
.I ".P "
files.
.TP 8
.BI -L directory
Include
.I directory
in the search for libraries in the final linking stage.
.TP 8
.B "-o outfile"
Send output to
.BR outfile .
.TP 8
.BR -Wx,arg1 [, arg2 ...]
Pass the argument[s]
.B argi
through to the subprocess
.BR x ,
where
.B x
can assume one of the following values:
.B f
for the f2c step,
.B p
for the preprocessing step,
.B c
for the C compiler,
.B a
for the assembler (this is actually passed to the C compiler, too), and
.B l
for the linker.
As an example, defining a preprocessor constant for the C compilation
step would be done with
.BR "-Wc,-DUNIX=1" .
Specifying the
.B -f
option to f2c would be done via
.BR "-Wf,-f" .
.TP 8
.B "f2c option"
.B fort77
passes through almost all
.B f2c
options:
.BR -C ,
.BR -U ,
.BR -u ,
.BR -a ,
.BR -E ,
.BR -h ,
.BR -P ,
.BR -R ,
.BR -r ,
.BR -z ,
.BR -I2 ,
.BR -I4 ,
.BR -onetrip ,
.BR -!c ,
.BR -!l ,
.BR -!P ,
.BR -!R ,
.BR -ext ,
.BR -!bs ,
.BR -W[n] ,
.BR -w8 
.BR -r8
and
.BR -w66 .
.TP 8
.B "gcc options"
The following options are passed through to gcc:
.BR -f* ,
.BR -W* ,
.BR -U* ,
.BR -A* ,
.BR -m* ,
.BR -S ,
.BR -E ,
.BR -v ,
.BR -x ,
.BR -pipe ,
.BR -o ,
.BR -I ,
.BR -V ,
.BR -b* ,
.BR -p ,
.BR -pg .
.TP 8
.B "linker option"
The options passed to the linking stage are
.BR -static ,
.BR -shared ,
.BR -v ,
.BR -V ,
and
.BR -symbolic .
.SH BUGS
To make debugging work, you need to set a breakpoint at
.B MAIN__
before you start.
.PP
.B f2c
This script automatically supplies the
.B -I.
option to
.BR f2c .
Older versions of
.BR f2c 
may not support this.
.PP
This script is for the interaction of gcc and f2c; using it with
another compiler will probably require modification.
.PP
The
.B -ffast-math
option is implied in -O, unlike gcc.
If this causes problems, it can be overridden with
.BR -fnofast-math .
.PP
The
.B fort77
script does not strictly conform to Posix.2, because it acceppts
long options with one leading slash.  This is done for gcc
compatibility.
.SH AUTHOR
Thomas Koenig, ig25@rz.uni-karlsruhe.de
